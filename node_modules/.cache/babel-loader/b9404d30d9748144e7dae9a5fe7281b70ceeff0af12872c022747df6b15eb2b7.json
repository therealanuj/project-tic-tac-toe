{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\tictac\\\\src\\\\Board.js\";\nimport { useState } from \"react\";\nimport Square from \"./Square\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  function handleClick(i) {\n    if (squares[i] || calculateWinner(squares)) return;\n    const nextSquares = squares.slice();\n    nextSquares[i] = xIsNext ? \"X\" : \"O\";\n    onPlay(nextSquares);\n  }\n  function calculateWinner(squares) {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] == squares[b] && squares[a] == squares[c]) return squares[a];\n    }\n    return null;\n  }\n  let winner = calculateWinner(squares);\n  let status = winner ? \"Winner: \" + winner : \"Next Turn:\" + (xIsNext ? \"X\" : \"O\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 3\n    }, this), Array(3).fill(null).map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: Array(3).fill(null).map((_, j) => {\n        const squareIndex = i * 3 + j;\n        return /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[squareIndex],\n          onSquareClick: () => handleClick(squareIndex)\n        }, squareIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this);\n      })\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this);\n}\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","Square","jsxDEV","_jsxDEV","Board","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","lines","length","a","b","c","winner","status","children","className","fileName","_jsxFileName","lineNumber","columnNumber","Array","fill","map","_","j","squareIndex","value","onSquareClick","_c","$RefreshReg$"],"sources":["D:/react/tictac/src/Board.js"],"sourcesContent":["import { useState } from \"react\";\nimport Square from \"./Square\";\nfunction Board({xIsNext,squares,onPlay}) {\n  \n  function handleClick(i) {\n    if(squares[i]||calculateWinner(squares))\n    return\n    const nextSquares=squares.slice();\n    \n    nextSquares[i] =(xIsNext)? \"X\":\"O\";\n    \n    onPlay(nextSquares);\n  }\n  function calculateWinner(squares){\n    const lines=[[0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]]\n    for(let i=0;i<lines.length;i++)\n    {\n      const [a,b,c]=lines[i];\n      if(squares[a]&&squares[a]==squares[b]&&squares[a]==squares[c])\n      return squares[a];\n    }\n    return null;\n  }\n  let winner=calculateWinner(squares)\n  let status=(winner)?\"Winner: \"+winner:\"Next Turn:\"+((xIsNext)?\"X\":\"O\")\n \n\n  \n  return (\n  <div>\n  <div className=\"status\">{status}</div>\n  {Array(3).fill(null).map((_, i) => (\n      <div key={i} className=\"board-row\">\n        {Array(3).fill(null).map((_, j) => {\n          const squareIndex = i * 3 + j;\n          return (\n            <Square\n              key={squareIndex}\n              value={squares[squareIndex]}\n              onSquareClick={() => handleClick(squareIndex)}\n            />\n          );\n        })}\n        </div>\n    ))}\n  </div>)\n}\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}